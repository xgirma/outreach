{
  "openapi": "3.0.0",
  "info": {
    "title": "Outreach",
    "description": "Church outreach admin platform. API documentation.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "{protocol}://localhost:{port}/api/{basePath}",
      "description": "Sandbox server (uses test data)",
      "variables": {
        "protocol": {
          "enum": ["http", "https"],
          "default": "http"
        },
        "port": {
          "enum": ["3005", "3000"],
          "default": "3005"
        },
        "basePath": {
          "default": "v1"
        }
      }
    }
  ],
  "consumes": "application/json",
  "produces": "application/json",
  "basePath": "v1",
  "paths": {
    "/register": {
      "post": {
        "tags": ["Admins"],
        "description":
          "Registers new super-admin if it does not exist already. Use strong password. The password must be at least 8 characters long. The password must contain at least one uppercase letter. The password must contain at least one number. The password must contain at least one special character. Password also can just be a pass-phrase as explained here https://xkcd.com/936/. Example pass-phrase: 'correct horse battery staple'",
        "summary": "Registers super-admin user",
        "requestBody": {
          "description": "The username and password of the new super-admin",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "username": { "$ref": "#/components/parameters/username" },
                  "password": { "$ref": "#/components/parameters/password" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return super-admin token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/signin": {
      "post": {
        "tags": ["Signin"],
        "description": "Signin admin",
        "summary": "Signin Admin user",
        "requestBody": {
          "description": "Existing Admin username and password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "username": { "$ref": "#/components/parameters/username" },
                  "password": { "$ref": "#/components/parameters/password" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/admins": {
      "post": {
        "tags": ["Admins"],
        "description":
          "Super-admin register a new admin user. Creating a new admin requires a super-admin token. Admin cannot create another admin. If an admin with the same username exists, the new admin cannot be created.",
        "summary": "Registers a new admin user",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "New Admin username and password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "username": { "type": "string", "length": 10, "example": "Jane.Joe" },
                  "password": { "$ref": "#/components/parameters/password" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return token",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      },
      "get": {
        "tags": ["Admins"],
        "description":
          "If the requesting user is admin return only the requesting admin user data. When super-admin, return all admins data. That will be used when the super-admin manages other admin accounts, such as deleting or updating other admins",
        "summary": "Return admins",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Admin(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "status": { "$ref": "#/components/parameters/success" },
                      "data": {
                        "properties": {
                          "admins": {
                            "properties": {
                              "type": "object",
                              "_id": { "$ref": "#/components/parameters/_id" },
                              "username": { "$ref": "#/components/parameters/username" },
                              "passwordHash": { "$ref": "#/components/parameters/passwordHash" },
                              "role": { "$ref": "#/components/parameters/passwordHash" },
                              "createdAt": { "$ref": "#/components/parameters/createdAt" },
                              "updatedAt": { "$ref": "#/components/parameters/updatedAt" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admins/{id}": {
      "get": {
        "tags": ["Admins"],
        "description":
          "If the requesting user is admin return only the requesting admin user data. A super-admin, can get any admin data by ID. That will be used when the super-admin manages other admin accounts, such as deleting or updating other admins",
        "summary": "Return admin by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Admin(s)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "status": { "$ref": "#/components/parameters/success" },
                      "data": {
                        "properties": {
                          "admins": {
                            "properties": {
                              "type": "object",
                              "_id": { "$ref": "#/components/parameters/_id" },
                              "username": { "$ref": "#/components/parameters/username" },
                              "passwordHash": { "$ref": "#/components/parameters/passwordHash" },
                              "role": { "$ref": "#/components/parameters/passwordHash" },
                              "createdAt": { "$ref": "#/components/parameters/createdAt" },
                              "updatedAt": { "$ref": "#/components/parameters/updatedAt" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Admins"],
        "description":
          "Update password by ID. If the requesting user (super)-admin change its own password response will return success. When a super-admin updates a password of other admins a temporary password will be returned. A request body is not required in this case. An admin is only allowed to update its own password.",
        "summary": "Update password by ID and returns temporary password",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Old password and new password to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "currentPassword": { "$ref": "#/components/parameters/password" },
                  "newPassword": { "$ref": "#/components/parameters/newPassword" },
                  "newPasswordAgain": { "$ref": "#/components/parameters/newPassword" }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Confirm success",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          },
          "201": {
            "description": "Creates a temporary password",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Admins"],
        "description": "If super-admin can delete all, else delete self",
        "summary": "Delete admin by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Admin Id",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "201": {
            "description": "Deleted admin",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "tags": ["Info"],
        "description":
          "Return church information. Only one should be needed, but more than one can be created to facilitate editing. For example, create a new one and delete the old record can give safe update.",
        "summary": "Return church information",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Church information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": "object",
                    "status": { "$ref": "#/components/parameters/success" },
                    "data": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "type": "object",
                          "am": { "$ref": "#/components/schemas/ChurchInfo" },
                          "en": { "$ref": "#/components/schemas/ChurchInfo" },
                          "phone": { "$ref": "#/components/parameters/phone" },
                          "email": { "$ref": "#/components/parameters/email" },
                          "address": { "$ref": "#/components/schemas/Address" },
                          "adminname": { "$ref": "#/components/parameters/username" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Info"],
        "description": "Add church information",
        "summary": "Add church information",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description":
            "Church information to add. You can change the 'am' block with Amharic content. You don't need to enter 'adminname' value as it will be overwritten by the username of the request object.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/ChurchInfo" },
                  "en": { "$ref": "#/components/schemas/ChurchInfo" },
                  "phone": { "$ref": "#/components/parameters/phone" },
                  "email": { "$ref": "#/components/parameters/email" },
                  "address": { "$ref": "#/components/schemas/Address" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/info/{id}": {
      "get": {
        "tags": ["Info"],
        "description": "Return a church information by ID. Use the GET /info route to get the ID.",
        "summary": "Returns church information by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Info ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": "object",
                    "status": { "$ref": "#/components/parameters/success" },
                    "data": {
                      "properties": {
                        "am": { "$ref": "#/components/schemas/ChurchInfo" },
                        "en": { "$ref": "#/components/schemas/ChurchInfo" },
                        "phone": { "$ref": "#/components/parameters/phone" },
                        "email": { "$ref": "#/components/parameters/email" },
                        "address": { "$ref": "#/components/schemas/Address" },
                        "date": { "$ref": "#/components/parameters/date" },
                        "adminname": { "$ref": "#/components/parameters/username" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Info"],
        "description":
          "Updates church information by ID. You don't need to enter 'adminname' value as it will be overwritten by the username of the request object.",
        "summary": "Updates church information by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Info ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Church information to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/ChurchInfo" },
                  "en": { "$ref": "#/components/schemas/ChurchInfo" },
                  "phone": { "$ref": "#/components/parameters/phone" },
                  "email": { "$ref": "#/components/parameters/email" },
                  "address": { "$ref": "#/components/schemas/Address" }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Info"],
        "description": "Deletes church information by ID",
        "summary": "Deletes church information by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Info ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted church information",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/intro": {
      "get": {
        "tags": ["Intro"],
        "description": "The content in the introduction section of the homepage",
        "summary": "Returns homepage introduction content",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Introduction content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "am": { "$ref": "#/components/schemas/Introduction" },
                      "en": { "$ref": "#/components/schemas/Introduction" },
                      "date": { "$ref": "#/components/parameters/date" },
                      "adminname": { "$ref": "#/components/parameters/username" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Intro"],
        "description": "Add the main content of the home page",
        "summary": "Add homepage introduction content",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "Homepage introduction content to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Introduction" },
                  "en": { "$ref": "#/components/schemas/Introduction" },
                  "date": { "$ref": "#/components/parameters/date" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Introduction created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/intro/{id}": {
      "get": {
        "tags": ["Intro"],
        "description":
          "Return a homepage main content by ID. Multiple introductions could be stored. And could be used in different yearly events.",
        "summary": "Returns homepage introduction by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Intro ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Introduction" },
                    "en": { "$ref": "#/components/schemas/Introduction" },
                    "date": { "$ref": "#/components/parameters/date" },
                    "adminname": { "$ref": "#/components/parameters/username" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Intro"],
        "description": "Updates homepage introduction content by ID",
        "summary": "Updates homepage introduction by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Intro ID",
            "schema": {
              "type": "string"
            },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Home page content to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Introduction" },
                  "en": { "$ref": "#/components/schemas/Introduction" }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Update accepted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Intro"],
        "description": "Deletes homepage introduction content by ID",
        "summary": "Deletes homepage introduction by ID",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Intro ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted homepage introduction content",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/event": {
      "get": {
        "tags": ["Event"],
        "description": "Event details",
        "summary": "Returns event details",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Event detail",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "am": { "$ref": "#/components/schemas/Event" },
                      "en": { "$ref": "#/components/schemas/Event" },
                      "address": { "$ref": "#/components/schemas/Address" },
                      "email": { "$ref": "#/components/parameters/email" },
                      "phone": { "$ref": "#/components/parameters/phone" },
                      "date_start": { "$ref": "#/components/parameters/date" },
                      "date_end": { "$ref": "#/components/parameters/date" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event"],
        "description": "Add event",
        "summary": "Add event",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "Event to add",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Event" },
                  "en": { "$ref": "#/components/schemas/Event" },
                  "address": { "$ref": "#/components/schemas/Address" },
                  "email": { "$ref": "#/components/parameters/email" },
                  "phone": { "$ref": "#/components/parameters/phone" },
                  "date_start": { "$ref": "#/components/parameters/date" },
                  "date_end": { "$ref": "#/components/parameters/date" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/event/past": {
      "get": {
        "tags": ["Event"],
        "description": "Return past event",
        "summary": "Returns past event",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Event" },
                    "en": { "$ref": "#/components/schemas/Event" },
                    "address": { "$ref": "#/components/schemas/Address" },
                    "email": { "$ref": "#/components/parameters/email" },
                    "phone": { "$ref": "#/components/parameters/phone" },
                    "date_start": { "$ref": "#/components/parameters/date" },
                    "date_end": { "$ref": "#/components/parameters/date" },
                    "_id": { "$ref": "#/components/parameters/_id" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/future": {
      "get": {
        "tags": ["Event"],
        "description": "Return future event",
        "summary": "Returns future event",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Event" },
                    "en": { "$ref": "#/components/schemas/Event" },
                    "address": { "$ref": "#/components/schemas/Address" },
                    "email": { "$ref": "#/components/parameters/email" },
                    "phone": { "$ref": "#/components/parameters/phone" },
                    "date_start": { "$ref": "#/components/parameters/date" },
                    "date_end": { "$ref": "#/components/parameters/date" },
                    "_id": { "$ref": "#/components/parameters/_id" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/event/{id}": {
      "get": {
        "tags": ["Event"],
        "description": "Return event by ID",
        "summary": "Returns event",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Event ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Event" },
                    "en": { "$ref": "#/components/schemas/Event" },
                    "address": { "$ref": "#/components/schemas/Address" },
                    "email": { "$ref": "#/components/parameters/email" },
                    "phone": { "$ref": "#/components/parameters/phone" },
                    "date_start": { "$ref": "#/components/parameters/date" },
                    "date_end": { "$ref": "#/components/parameters/date" },
                    "_id": { "$ref": "#/components/parameters/_id" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Event"],
        "description": "Updates event by ID",
        "summary": "Updates event",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Event ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Event update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Event" },
                  "en": { "$ref": "#/components/schemas/Event" },
                  "address": { "$ref": "#/components/schemas/Address" },
                  "email": { "$ref": "#/components/parameters/email" },
                  "phone": { "$ref": "#/components/parameters/phone" },
                  "date_start": { "$ref": "#/components/parameters/date" },
                  "date_end": { "$ref": "#/components/parameters/date" }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event"],
        "description": "Deletes event by ID",
        "summary": "Deletes event",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Event ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted event",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": ["Service"],
        "description": "Church service",
        "summary": "Returns services",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Church service",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "am": { "$ref": "#/components/schemas/Service" },
                      "en": { "$ref": "#/components/schemas/Service" },
                      "phone": { "$ref": "#/components/parameters/phone" },
                      "email": { "$ref": "#/components/parameters/email" },
                      "adminname": { "$ref": "#/components/parameters/username" },
                      "date": { "$ref": "#/components/parameters/date" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Service"],
        "description": "Add service",
        "summary": "Adds service",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "Service to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Service" },
                  "en": { "$ref": "#/components/schemas/Service" },
                  "phone": { "$ref": "#/components/parameters/phone" },
                  "email": { "$ref": "#/components/parameters/email" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/services/{id}": {
      "get": {
        "tags": ["Service"],
        "description": "Return service by ID",
        "summary": "Returns service",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Service" },
                    "en": { "$ref": "#/components/schemas/Service" },
                    "phone": { "$ref": "#/components/parameters/phone" },
                    "email": { "$ref": "#/components/parameters/email" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Service"],
        "description": "Updates service by ID",
        "summary": "Updates a service",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": {
              "type": "string"
            },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Service to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Service" },
                  "en": { "$ref": "#/components/schemas/Service" },
                  "phone": { "$ref": "#/components/parameters/phone" },
                  "email": { "$ref": "#/components/parameters/email" }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Service"],
        "description": "Deletes a service by ID",
        "summary": "Deletes a home page main content",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Service ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "202": {
            "description": "Deleted a service",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessResponse" }
              }
            }
          }
        }
      }
    },
    "/blog": {
      "get": {
        "tags": ["Blog"],
        "description": "Returns all blog",
        "summary": "Returns blog",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "A list of blog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "am": { "$ref": "#/components/schemas/Blog" },
                      "en": { "$ref": "#/components/schemas/Blog" },
                      "author": { "$ref": "#/components/parameters/name" },
                      "date_start": { "$ref": "#/components/parameters/date" },
                      "tag": { "$ref": "#/components/parameters/tag" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Blog"],
        "description": "Add a new blog",
        "summary": "Add blog",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "Blog to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Blog" },
                  "en": { "$ref": "#/components/schemas/Blog" },
                  "author": { "$ref": "#/components/parameters/name" },
                  "date_start": { "$ref": "#/components/parameters/date" },
                  "tag": { "$ref": "#/components/parameters/tag" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Blog" },
                    "en": { "$ref": "#/components/schemas/Blog" },
                    "author": { "$ref": "#/components/parameters/name" },
                    "date_start": { "$ref": "#/components/parameters/date" },
                    "tag": { "$ref": "#/components/parameters/tag" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/blog/{id}": {
      "get": {
        "tags": ["Blog"],
        "description": "Return a blog by ID",
        "summary": "Returns a blog",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Blog ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Blog" },
                    "en": { "$ref": "#/components/schemas/Blog" },
                    "author": { "$ref": "#/components/parameters/name" },
                    "date_start": { "$ref": "#/components/parameters/date" },
                    "tag": { "$ref": "#/components/parameters/tag" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Blog"],
        "description": "Updates a blog by an ID",
        "summary": "Updates a blog",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Blog ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Blog to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Blog" },
                  "en": { "$ref": "#/components/schemas/Blog" },
                  "author": { "$ref": "#/components/parameters/name" },
                  "date_start": { "$ref": "#/components/parameters/date" },
                  "tag": { "$ref": "#/components/parameters/tag" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Blog" },
                    "en": { "$ref": "#/components/schemas/Blog" },
                    "author": { "$ref": "#/components/parameters/name" },
                    "date_start": { "$ref": "#/components/parameters/date" },
                    "tag": { "$ref": "#/components/parameters/tag" }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Blog"],
        "description": "Deletes a blog matches an ID",
        "summary": "Deletes a blog",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Blog ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "201": {
            "description": "Deleted blog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "am": { "$ref": "#/components/schemas/Blog" },
                      "en": { "$ref": "#/components/schemas/Blog" },
                      "author": { "$ref": "#/components/parameters/name" },
                      "date_start": { "$ref": "#/components/parameters/date" },
                      "tag": { "$ref": "#/components/parameters/tag" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/media": {
      "get": {
        "tags": ["Media"],
        "description": "Returns all audio/video",
        "summary": "Returns audio/video",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "A list of audio/video",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "am": { "$ref": "#/components/schemas/Media" },
                      "en": { "$ref": "#/components/schemas/Media" },
                      "title": {
                        "type": "string",
                        "description": "Church audio/video",
                        "example":
                          "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                      },
                      "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                      "media_type": { "type": "string", "example": "video" },
                      "tag": { "type": "string", "example": "Mezmur" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Media"],
        "description": "Add a new video/audio",
        "summary": "Add video/audio",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "description": "Video/audio to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Media" },
                  "en": { "$ref": "#/components/schemas/Media" },
                  "title": {
                    "type": "string",
                    "description": "Church audio/video",
                    "example": "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                  },
                  "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                  "media_type": { "type": "string", "example": "video" },
                  "tag": { "type": "string", "example": "Mezmur" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Media" },
                    "en": { "$ref": "#/components/schemas/Media" },
                    "title": {
                      "type": "string",
                      "description": "Church audio/video",
                      "example": "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                    },
                    "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                    "media_type": { "type": "string", "example": "video" },
                    "tag": { "type": "string", "example": "Mezmur" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "tags": ["Media"],
        "description": "Return a video/audio by ID",
        "summary": "Returns a video/audio",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Video/audio ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Media" },
                    "en": { "$ref": "#/components/schemas/Media" },
                    "title": {
                      "type": "string",
                      "description": "Church audio/video",
                      "example": "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                    },
                    "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                    "media_type": { "type": "string", "example": "video" },
                    "tag": { "type": "string", "example": "Mezmur" }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Media"],
        "description": "Updates a video/audio by an ID",
        "summary": "Updates a video/audio",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Video/audio ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "requestBody": {
          "description": "Blog to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "type": "object",
                  "am": { "$ref": "#/components/schemas/Media" },
                  "en": { "$ref": "#/components/schemas/Media" },
                  "title": {
                    "type": "string",
                    "description": "Church audio/video",
                    "example": "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                  },
                  "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                  "media_type": { "type": "string", "example": "video" },
                  "tag": { "type": "string", "example": "Mezmur" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": "object",
                    "am": { "$ref": "#/components/schemas/Media" },
                    "en": { "$ref": "#/components/schemas/Media" },
                    "title": {
                      "type": "string",
                      "description": "Church audio/video",
                      "example": "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                    },
                    "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                    "media_type": { "type": "string", "example": "video" },
                    "tag": { "type": "string", "example": "Mezmur" }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Media"],
        "description": "Deletes a video/audio matches an ID",
        "summary": "Deletes a video/audio",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Video/audio ID",
            "schema": { "type": "string" },
            "example": "5b1de7ac698c71055ef657f3"
          }
        ],
        "responses": {
          "201": {
            "description": "Deleted blog",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": "object",
                      "am": { "$ref": "#/components/schemas/Media" },
                      "en": { "$ref": "#/components/schemas/Media" },
                      "title": {
                        "type": "string",
                        "description": "Church audio/video",
                        "example":
                          "ኪዳነምህረት እናቴ KidaneMihret Enatie- Best Ethiopian Orthodox Mezmurs"
                      },
                      "url": { "type": "string", "example": "https://youtu.be/BlnyzdJGqM8" },
                      "media_type": { "type": "string", "example": "video" },
                      "tag": { "type": "string", "example": "Mezmur" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Blog": {
        "required": ["title", "body"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 200,
            "description": "Blog title",
            "example": "“እያዩት ወደሰማይ ዐረገ” (ሉቃ 24÷50 የሐዋ 1÷9)"
          },
          "body": { "$ref": "#/components/parameters/longText" }
        }
      },
      "Introduction": {
        "required": ["title", "author", "intro"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 200,
            "example": "እንኳን ለጌታችን ለመድኃኒታችን ለኢየሱስ ክርስቶስ የዕርገት በዓል አደረሳችሁ!!!"
          },
          "author": { "$ref": "#/components/parameters/name" },
          "intro": { "$ref": "#/components/parameters/longText" }
        }
      },
      "Service": {
        "required": ["title", "description"],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 200,
            "example": "The Divine Liturgy"
          },
          "description": { "$ref": "#/components/parameters/longText" },
          "contact": { "type": "string", "maxLength": 100, "example": "Diakon Mezmur Mekasha" }
        }
      },
      "Address": {
        "required": ["street", "city", "country"],
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "maxLength": 200,
            "description": "Street name",
            "example": "1234 EastLake Ave East"
          },
          "city": {
            "type": "string",
            "maxLength": 50,
            "description": "City name",
            "example": "Seattle"
          },
          "state": {
            "type": "string",
            "maxLength": 50,
            "description": "State name",
            "example": "WA"
          },
          "zip": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 1000000,
            "description": "Zip code",
            "example": "98201"
          },
          "country": {
            "type": "string",
            "maxLength": 50,
            "description": "Country name",
            "example": "United States"
          }
        }
      },
      "BasicInfo": {
        "required": ["name", "denomination", "phone"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "description": "Church name",
            "example": "St. George Ethiopian Orthodox Tewahedo Church"
          },
          "denomination": {
            "type": "string",
            "maxLength": 100,
            "description": "Church denomination",
            "example": "Ethiopian Orthodox Tewahedo Church"
          }
        }
      },
      "Bible": {
        "required": ["verse", "from"],
        "type": "object",
        "properties": {
          "verse": {
            "type": "string",
            "maxLength": 500,
            "description": "Bible verses or quotes",
            "example":
              "And I tell you that you are Peter,and on this rock I will build my church, and the gates of Hadeswill not overcome it."
          },
          "from": {
            "type": "string",
            "maxLength": 50,
            "description": "Bible verses or quotes reference",
            "example": "Matthew 16:18"
          }
        }
      },
      "ChurchInfo": {
        "type": "object",
        "allOf": [
          { "$ref": "#/components/schemas/BasicInfo" },
          { "properties": { "bible": { "$ref": "#/components/schemas/Bible" } } }
        ]
      },
      "Event": {
        "required": ["title", "description"],
        "type": "object",
        "properties": {
          "title": { "type": "string", "maxLength": 200, "example": "የትንሣኤያችን በኩር የሆነው ጌታ በመቃብሩ" },
          "description": { "$ref": "#/components/parameters/longText" }
        }
      },
      "Media": {
        "type": "object",
        "properties": { "body": { "$ref": "#/components/parameters/longText" } }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "type": "object",
          "status": { "$ref": "#/components/parameters/success" },
          "data": {
            "properties": {
              "type": "object"
            }
          }
        }
      }
    },
    "parameters": {
      "_id": {
        "type": "integer",
        "format": "int32",
        "minimum": 0,
        "maximum": 200,
        "description": "ID",
        "example": "5b1de7ac698c71055ef657f3"
      },
      "date": { "type": "string", "format": "date-time" },
      "email": {
        "type": "string",
        "format": "email",
        "description": "Church main contact email",
        "example": "info@gedam.org"
      },
      "phone": {
        "type": "string",
        "maxLength": 20,
        "description": "Church main contact phone number",
        "example": "(425) 329 - 9092"
      },
      "name": { "type": "string", "length": 1000, "example": "Melkamu Abate" },
      "tag": { "type": "string", "length": 1000, "example": "History" },
      "longText": {
        "type": "string",
        "example":
          "የትንሣኤያችን በኩር የሆነው ጌታ በመቃብሩ ቦታ ሥርዓትን እያስተማረ አልፎ አልፎም በግልጥ እየታየ ፍርሐታቸውን እያስወገደ አይሑድ እንደሚሉት ሥጋውንም ደቀመዛሙርቱ እንዳልሰረቁት ይልቁንም በሞት ላይ ሥልጣንኑን አሳይቶ መቃብሩን ባዶ አድርጐ በትንሣኤው አለት ላይ ያቆመን፣ ሞት በእርሱ እንደተሸነፈ የማይታየው እየታየ፣ ዘመን የማይቆጠርለት፣ ዘላለማዊ ጌታ የማይዳሰሰው እየተዳሰሰ ለ40 ቀናት ያኽል ቆይቶ ተከታዮቹን ሐዋርያትን ወደ ቢታንያ አወጣቸው። እያዩት በምስጋና ወደሰማይ ዐረገ።"
      },
      "username": { "type": "string", "length": 10, "example": "John.Doe" },
      "password": { "type": "string", "length": 10, "example": "p-U:QaA/3G", "format": "password" },
      "newPassword": {
        "type": "string",
        "length": 10,
        "example": "q-W:QzA$3S",
        "format": "q-W:QzA$3S"
      },
      "tempPassword": {
        "type": "string",
        "length": 10,
        "example": "Xn.E>P){@2",
        "format": "password"
      },
      "role": { "type": "number", "enum": [0, 1], "example": "0" },
      "passwordHash": {
        "type": "string",
        "example": "$2b$10$AmyUb3W1CWMao3cVbmiYDOsWAkD3vGLefYm09LhNpRbH9Q37A2LHi"
      },
      "token": {
        "type": "string",
        "example":
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjViMWRlN2FjNjk4YzcxMDU1ZWY2NTdmMyIsImlhdCI6MTUyODY4NjUwOCwiZXhwIjoxNTMxMjc4NTA4fQ.-WKSkdvahV3aESbp1jR3yZ0iXisiJfPwuvV3jUHpMOo"
      },
      "success": { "type": "String", "example": "success" },
      "createdAt": {
        "type": "String",
        "format": "date-time",
        "example": "2018-06-16T03:39:52.111Z"
      },
      "updatedAt": {
        "type": "String",
        "format": "date-time",
        "example": "2018-06-16T03:39:52.111Z"
      }
    }
  }
}
